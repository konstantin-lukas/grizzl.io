services:
    postgres:
        container_name: grizzl-postgres
        image: postgres:18.0-alpine3.22
        restart: unless-stopped
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
            DB_NAME: ${DB_NAME}
            DB_PASSWORD: ${DB_PASSWORD}
            DB_USERNAME: ${DB_USERNAME}
        volumes:
            - grizzl_database:/var/lib/postgresql/data
            - ./docker/postgres/init:/docker-entrypoint-initdb.d
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
            interval: 1s
            timeout: 15s
            retries: 10
        networks:
            - grizzl_net

    postgres-backup:
        image: postgres:18.0-alpine3.22
        container_name: grizzl-postgres-backup
        depends_on:
            postgres:
                condition: service_healthy
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            DB_NAME: ${DB_NAME}
        volumes:
            - grizzl_database_backups:/backups
        entrypoint: ["sh", "-c"]
        command:
            - |
                while true; do
                  echo "Starting nightly backup at $(date)";
                  PGPASSWORD=$$POSTGRES_PASSWORD pg_dump -h postgres -U $$POSTGRES_USER $$DB_NAME \
                    | gzip > /backups/grizzl_backup_$(date +%Y-%m-%d_%H-%M-%S).sql.gz;
                  echo "Backup completed at $(date)";
                  # Keep only the last 7 backups
                  ls -1t /backups/*.sql.gz | tail -n +8 | xargs -r rm --;
                  sleep 24h;
                done
        restart: unless-stopped
        networks:
            - grizzl_net

    migrations:
        image: node:24-alpine
        container_name: grizzl-migrations
        depends_on:
            postgres:
                condition: service_healthy
        volumes:
            - ./package.json:/home/grizzl/package.json
            - ./package-lock.json:/home/grizzl/package-lock.json
            - ./drizzle.config.ts:/home/grizzl/drizzle.config.ts
            - ./lib/db:/home/grizzl/lib/db
        working_dir: /home/grizzl
        environment:
            DB_HOST: ${DB_HOST}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            DB_NAME: ${DB_NAME}
        command: npm ci && npx drizzle-kit migrate
        networks:
            - grizzl_net
        restart: "no"

    webserver:
        container_name: grizzl-web-server
        build:
            context: .
            dockerfile: Dockerfile
        environment:
            NUXT_PUBLIC_APP_ENV: ${NUXT_PUBLIC_APP_ENV:-production}
            DB_HOST: ${DB_HOST}
            DB_USERNAME: ${DB_USERNAME}
            DB_PASSWORD: ${DB_PASSWORD}
            DB_NAME: ${DB_NAME}
            BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET}
            BETTER_AUTH_URL: ${BETTER_AUTH_URL}
            NUXT_PUBLIC_ORIGIN: ${NUXT_PUBLIC_ORIGIN}
            OAUTH_GITHUB_ID: ${OAUTH_GITHUB_ID}
            OAUTH_GITHUB_SECRET: ${OAUTH_GITHUB_SECRET}
            OAUTH_DISCORD_ID: ${OAUTH_DISCORD_ID}
            OAUTH_DISCORD_SECRET: ${OAUTH_DISCORD_SECRET}
            OAUTH_REDDIT_ID: ${OAUTH_REDDIT_ID}
            OAUTH_REDDIT_SECRET: ${OAUTH_REDDIT_SECRET}
            OAUTH_TWITCH_ID: ${OAUTH_TWITCH_ID}
            OAUTH_TWITCH_SECRET: ${OAUTH_TWITCH_SECRET}
        restart: unless-stopped
        user: "${DOCKER_USER_ID:-1000}:${DOCKER_GROUP_ID:-1000}"
        depends_on:
            postgres:
                condition: service_healthy
            migrations:
                condition: service_completed_successfully
        networks:
            - proxy_net
            - grizzl_net

volumes:
    grizzl_database:
        name: grizzl_database
    grizzl_database_backups:
        name: grizzl_database_backup

networks:
    proxy_net:
        name: proxy_net
        external: true
    grizzl_net:
        name: grizzl_net
